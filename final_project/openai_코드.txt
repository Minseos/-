import os
import openai
import pandas as pd
import time

# OpenAI API 키 설정
openai.api_key = os.getenv('OPENAI_API_KEY')

# 입력 및 출력 폴더 경로
input_folder = "C:/fintech_service/final_project/data/리뷰추출/네이버분석전"
output_folder = "C:/fintech_service/final_project/data/리뷰추출/네이버분석후"

# 출력 폴더가 존재하지 않으면 생성
os.makedirs(output_folder, exist_ok=True)

# 입력 폴더의 모든 CSV 파일 가져오기
csv_files = [file for file in os.listdir(input_folder) if file.endswith('.csv')]

# 각 파일에 대해 감성 분석 수행
for csv_file in csv_files:
    input_path = os.path.join(input_folder, csv_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(csv_file)[0]}_분석.csv")
    
    try:
        # CSV 파일 불러오기
        reviews_df = pd.read_csv(input_path)
        
        # 감성 분석 결과를 저장할 리스트
        sentiments = []

        # 리뷰마다 감성 분석 수행
        for review_text in reviews_df['Review']:  # 컬럼명이 'Review'라고 가정
            retries = 3  # 최대 재시도 횟수
            sentiment = "오류"  # 기본 값

            for attempt in range(retries):
                try:
                    # 최신 ChatCompletion 모델을 사용한 감성 분석
                    response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo-1106",
                        messages=[
                            {"role": "system", "content": "당신은 감성 분석을 전문으로 하는 도움말 어시스턴트입니다. 문맥이 없는 단어(예: '좋아요', '별로예요')만 있는 경우, 단어의 감성에 따라 '긍정적' 또는 '부정적'으로 응답하세요."},
                            {"role": "user", "content": f"다음 리뷰의 감성을 분석하여 '긍정적' 또는 '부정적' 형식으로만 응답해 주세요: '{review_text}'"}
                        ],
                        max_tokens=20,
                        temperature=0.2
                    )
                    
                    # API 응답에서 감성 분석 결과 추출
                    response_text = response.choices[0].message['content'].strip()
                    if "긍정적" in response_text:
                        sentiment = "긍정적"
                    elif "부정적" in response_text:
                        sentiment = "부정적"
                    else:
                        sentiment = "알 수 없음"
                    
                    break  # 정상 처리되면 반복 종료
                except Exception as e:
                    print(f"리뷰 처리 중 오류 발생 (시도 {attempt + 1}/{retries}): {e}")
                    time.sleep(2)  # 재시도 전 대기

            sentiments.append(sentiment)
            time.sleep(1)  # 요청 간 대기 시간
        
        # 결과를 데이터프레임에 추가
        reviews_df['sentiment'] = sentiments

        # 결과를 파일로 저장
        reviews_df.to_csv(output_path, index=False)
        print(f"감성 분석 완료 및 결과 저장: {output_path}")

    except Exception as e:
        print(f"파일 처리 중 오류 발생: {e}")

print("모든 파일 처리 완료")
